//--------------------------------------------------------------------
/*! @file HBActions.cpp
 *
 * @brief Declarations of actions for Heat Bath updates
 *
 *
 *  Time-stamp: <2013-04-03 14:08:23 neo>
 */
//--------------------------------------------------------------------

#include "HBActions_SUN.hpp"
#include "Tools/sunMatUtils.hpp"
#include "Tools/fieldUtils.hpp"
#include "include/messages_macros.hpp"
#include "Tools/randNum.h"
#include "include/numerical_const.hpp"
#include "Main/Geometry/siteIndex_EvenOdd.hpp"

#include <valarray>

inline double SU2_det_r(SUNmat& u) {
  return  u.r(0,0)*u.r(1,1)- u.i(0,0)*u.i(1,1)-
   u.r(0,1)*u.r(1,0)+ u.i(0,1)*u.i(1,0);

}

inline double SU2_det_i(SUNmat& u) {
  return  u.r(0,0)*u.i(1,1)+ u.i(0,0)*u.r(1,1)-
   u.r(0,1)*u.i(1,0)- u.i(0,1)*u.r(1,0);

}

void HBAction_SUN::init(const RandNum& RNG) {
  //empty
  CCIO::cout << "INIT!!!\n";
};

double HBAction_SUN::calc_H() {
  //Number of plaquettes
  int Nplaq = CommonPrms::instance()->Lvol()*NDIM_*(NDIM_-1)/2.0;
  double plaq = stplfield_.plaquette(*u_);
  double Hgauge = Params_.beta*Nplaq*(1.0 -plaq);

  _Message(ACTION_VERB_LEVEL,"    [HeatBathSUNGaugeWilson] H = "<<Hgauge <<"\n");
  _Message(ACTION_VERB_LEVEL,"    [HeatBathSUNGaugeWilson] Plaquette = "<<plaq<<"\n");
  
  return Hgauge;

};

void HBAction_SUN::hb_update(const RandNum& RNG) {
  using namespace SUNmatUtils; 
  using namespace FieldUtils;

  if (NC_!=2) {
    CCIO::cout << "Error [HBActions_SUN.cpp]: hb_update defined only for SU(2)\n";
    abort();
  }

  // Case of mixed actions




  // SU(2) updating
  GaugeField1D tmp; 
  SUNmat staple, newlink;
  std::vector<int> Sites; // stores even/odd information
  std::valarray<double> rand_num;
  std::valarray<double> rand_vec;
  double lambda_sq, sum;
  double x0;
  int site;

  rand_num.resize(4);
  rand_vec.resize(3);

  CCIO::cout << "Heat-bath updating...\n";
  for (int eo = 0; eo < 2; eo++) { 
    // use even-odd checkerboard 
    if (eo) { 
      Sites = SiteIndex_EvenOdd::instance()->esec();
    } else {
      Sites = SiteIndex_EvenOdd::instance()->osec();
    }
    for(int m = 0; m < NDIM_; ++m){
      tmp = 0.0;
      // Fill the staple field, tmp
      for(int n=0; n< NDIM_; ++n)
	if(n != m) tmp += stplfield_.upper_lower(*u_,m,n); 
 
      // Sweep among links 
      // first even (eo=0), then odd (eo=1)
      for (int s = 0; s < Nvol_/2; s++) {
	site = Sites[s];
	staple = mat(tmp, site);

	// Calculate xi = det (staple)^(1/2)
	double xi = SU2_det_r(staple); // for SU(2) det is always real and >0
	//double xi_im = SU2_det_i(staple);// just for check (==0)
	
	// Generating the new link
	// Step 1
	// Generate 4 random numbers distributed uniformly in (0,1]
	// Kennedy Pendleton Phys. Lett. 156B (1985) 393
	xi = sqrt(xi);
	do {
	  RNG.get(rand_num); // generates in [0,1)
	  rand_num[0] = 1.0 - rand_num[0];
	  rand_num[1] = 1.0 - rand_num[1];
	  rand_num[2] = 1.0 - rand_num[2];
	  lambda_sq = -1.0/(2.0*xi*Params_.beta)*
	    (log(rand_num[0])+
	     cos(2.0*PI*rand_num[1])*cos(2.0*PI*rand_num[1])*log(rand_num[2]));
	}	while ((rand_num[3]*rand_num[3]) > (1.0 - lambda_sq));
	
	x0 = 1.0 - 2.0 * lambda_sq;
	
	// Step 2
	do {
	  RNG.get(rand_vec); // generates in [0,1)
	  rand_vec *= 2.0;
	  rand_vec -= 1.0; //now in [-1,1)
	  sum = rand_vec[0]*rand_vec[0]+rand_vec[1]*rand_vec[1]+rand_vec[2]*rand_vec[2];
	}	while (sum > 1);
	
	// Normalize to sqrt(1-x0^2)
	double final_norm = sqrt(1.0 - x0*x0);
	double norm = sqrt(sum);
	rand_vec *= final_norm/norm;
	
	/* Create SU(2) matrix:
	        x0 + i x3      x1 + i x2
	   u = 
	       -x1 + i x2      x0 - i x3
	   
	   x1, x2, x3 elements of rand_vec
	*/
	
	newlink.set(0,0, x0          ,  rand_vec[2]);
	newlink.set(0,1,  rand_vec[0],  rand_vec[1]);
	newlink.set(1,0, -rand_vec[0],  rand_vec[1]);
	newlink.set(1,1, x0          , -rand_vec[2]);
	
	newlink *= staple;
	newlink /= xi;

	SetMat(*u_, newlink, site, m);
      } // end loop on sites
    } // end loop on mu
  } // end loop on even/odd checkerboard (essential)
  

};



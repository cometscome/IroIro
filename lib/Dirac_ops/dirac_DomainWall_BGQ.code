/*!--------------------------------------------------------------------------
 * @file dirac_DomainWall_BGQ.code
 *
 * @brief Definition of some BGQ optimized methods for Dirac_optimalDomainWall (5d operator)
 * Time-stamp: <2013-07-22 16:14:30 cossu>

 *-------------------------------------------------------------------------*/
#include "utils_BGQ.hpp"

const Field Dirac_optimalDomainWall::mult_hop5(const Field& f5) const{
  Field w5(f5size_), v(f4size_);
  double* v_ptr = v.getaddr(0);

  for(int s=0; s<N5_; ++s) {
    double* w5_ptr = w5.getaddr(ff_.index(0,0,s));
    double* f5_ptr = const_cast<Field&>(f5).getaddr(ff_.index(0,0,s));
    BGWilsonLA_MultScalar(w5_ptr,f5_ptr,Params_.dp_[s],Nvol_);
  }
  for(int s=0; s<N5_-1; ++s) {
    double* w5_ptr = w5.getaddr(ff_.index(0,0,s));
    BGWilsonLA_Proj_M(v_ptr,const_cast<Field&>(f5).getaddr(ff_.index(0,0,s+1)),Nvol_);
    BGWilsonLA_MultAddScalar(w5_ptr,v_ptr,-Params_.dm_[s],Nvol_);
  }
  for(int s=1; s<N5_; ++s) {
    double* w5_ptr = w5.getaddr(ff_.index(0,0,s));
    BGWilsonLA_Proj_P(v_ptr,const_cast<Field&>(f5).getaddr(ff_.index(0,0,s-1)),Nvol_);
    BGWilsonLA_MultAddScalar(w5_ptr,v_ptr,-Params_.dm_[s],Nvol_);
  }
  double* w5_ptr = w5.getaddr(ff_.index(0,0,0));
  BGWilsonLA_Proj_P(v_ptr,const_cast<Field&>(f5).getaddr(ff_.index(0,0,N5_-1)),Nvol_);
  BGWilsonLA_MultAddScalar(w5_ptr,v_ptr,mq_*Params_.dm_[0],Nvol_);

  w5_ptr = w5.getaddr(ff_.index(0,0,N5_-1));
  BGWilsonLA_Proj_M(v_ptr,const_cast<Field&>(f5).getaddr(ff_.index(0,0,0)),Nvol_);
  BGWilsonLA_MultAddScalar(w5_ptr, v_ptr,mq_*Params_.dm_[N5_-1],Nvol_);

  return w5;
}

const Field Dirac_optimalDomainWall::mult_hop5_dag(const Field& f5) const{
  Field w5(f5size_), v(f4size_);
  double* v_ptr = v.getaddr(0);

  for(int s=0; s<N5_; ++s){
    double* w5_ptr = w5.getaddr(ff_.index(0,0,s));
    double* f5_ptr = const_cast<Field&>(f5).getaddr(ff_.index(0,0,s));
    BGWilsonLA_MultScalar(w5_ptr,f5_ptr,Params_.dp_[s],Nvol_);
  }
  for(int s=0; s<N5_-1; ++s){
    double* w5_ptr = w5.getaddr(ff_.index(0,0,s));
    BGWilsonLA_Proj_P(v_ptr,const_cast<Field&>(f5).getaddr(ff_.index(0,0,s+1)),Nvol_);
    BGWilsonLA_MultAddScalar(w5_ptr,v_ptr,-Params_.dm_[s+1],Nvol_);
  }
  for(int s=1; s<N5_; ++s){
    double* w5_ptr = w5.getaddr(ff_.index(0,0,s));
    BGWilsonLA_Proj_M(v_ptr,const_cast<Field&>(f5).getaddr(ff_.index(0,0,s-1)),Nvol_);
    BGWilsonLA_MultAddScalar(w5_ptr,v_ptr,-Params_.dm_[s-1],Nvol_);
  }
  double* w5_ptr = w5.getaddr(ff_.index(0,0,0));
  BGWilsonLA_Proj_M(v_ptr,const_cast<Field&>(f5).getaddr(ff_.index(0,0,N5_-1)),Nvol_);
  BGWilsonLA_MultAddScalar(w5_ptr,v_ptr,mq_*Params_.dm_[N5_-1],Nvol_);

  w5_ptr = w5.getaddr(ff_.index(0,0,N5_-1));
  BGWilsonLA_Proj_P(v_ptr,const_cast<Field&>(f5).getaddr(ff_.index(0,0,0)),Nvol_);
  BGWilsonLA_MultAddScalar(w5_ptr,v_ptr,mq_*Params_.dm_[0],Nvol_);
  
  return w5;
}

const Field Dirac_optimalDomainWall::mult_hop5_inv(const Field& f5) const{

  Field w5(f5),lpf(f4size_),ey(f4size_),lmf(f4size_),fy(f4size_);
  double* lpf_ptr = lpf.getaddr(0);
  double* ey_ptr = ey.getaddr(0);
  double* fy_ptr = fy.getaddr(0);
  double* lmf_ptr = lmf.getaddr(0);

  double* w5_ptr_bdry   = w5.getaddr((N5_-1)*f4size_);
  BGWilsonLA_Proj_M(ey_ptr,const_cast<Field&>(w5).getaddr(ff_.index(0,0,0)),Nvol_);
  BGWilsonLA_MultAddScalar(w5_ptr_bdry,ey_ptr,-mq_* Params_.es_[0],Nvol_);

  for(int s=1; s<N5_-1; ++s){
    double* w5_ptr  = w5.getaddr(s*f4size_);
    double fact_lpf = (Params_.dm_[s]/Params_.dp_[s-1]);
    double fact_ey =  mq_*Params_.es_[s];

    BGWilsonLA_Proj_P(lpf_ptr,const_cast<Field&>(w5).getaddr(ff_.index(0,0,s-1)),Nvol_);
    BGWilsonLA_Proj_M( ey_ptr,const_cast<Field&>(w5).getaddr(ff_.index(0,0,s)),Nvol_);
 
    BGWilsonLA_MultAddScalar(w5_ptr,    lpf_ptr,fact_lpf,Nvol_);
    BGWilsonLA_MultAddScalar(w5_ptr_bdry,ey_ptr,-fact_ey,Nvol_);
  }
  BGWilsonLA_Proj_P(lpf_ptr,const_cast<Field&>(w5).getaddr(ff_.index(0,0,N5_-2)),Nvol_);
  BGWilsonLA_MultAddScalar(w5_ptr_bdry,lpf_ptr,(Params_.dm_[N5_-1]/Params_.dp_[N5_-2]),Nvol_);

  double fact= 1.0/(Params_.dp_[N5_-1] +mq_*Params_.dm_[N5_-2]*Params_.es_[N5_-2]);
  BGWilsonLA_MultScalar(w5_ptr_bdry, w5_ptr_bdry, fact, Nvol_);

  for(int s=N5_-2; s>=0; --s) {
    double* w5_ptr   = w5.getaddr(s*f4size_);
    BGWilsonLA_Proj_M(lmf_ptr,const_cast<Field&>(w5).getaddr(ff_.index(0,0,s+1)),Nvol_);
    BGWilsonLA_Proj_P(fy_ptr,const_cast<Field&>(w5).getaddr(ff_.index(0,0,N5_-1)),Nvol_);
    BGWilsonLA_MultAddScalar(w5_ptr,     lmf_ptr,Params_.dm_[s],Nvol_);
    BGWilsonLA_MultAddScalar(w5_ptr,     fy_ptr,-mq_*Params_.fs_[s],Nvol_);
    BGWilsonLA_MultScalar(w5_ptr, w5_ptr, 1.0/ Params_.dp_[s], Nvol_);
  }
  return w5;
}

const Field Dirac_optimalDomainWall::mult_hop5_dinv(const Field& f5) const{

  Field w5(f5),lpf(f4size_),ey(f4size_),lmf(f4size_),v(f4size_);
  double* w5_ptr  = w5.getaddr(0);
  double* v_ptr   = v.getaddr(0);
  double* lpf_ptr = lpf.getaddr(0);
  double* lmf_ptr = lmf.getaddr(0);
  double* ey_ptr  = ey.getaddr(0);

  BGWilsonLA_MultScalar(w5_ptr,w5_ptr,1.0/Params_.dp_[0],Nvol_);

  for(int s=1; s<N5_-1; ++s){
    w5_ptr = w5.getaddr(s*f4size_);
    BGWilsonLA_Proj_M(lmf_ptr,const_cast<Field&>(w5).getaddr(ff_.index(0,0,s-1)),Nvol_);
    BGWilsonLA_MultAddScalar(w5_ptr,lmf_ptr,Params_.dm_[s-1],Nvol_);
    BGWilsonLA_MultScalar(w5_ptr,w5_ptr,1.0/Params_.dp_[s], Nvol_);   
  }
  w5_ptr   = w5.getaddr((N5_-1)*f4size_); 
  BGWilsonLA_Proj_M(v_ptr,const_cast<Field&>(w5).getaddr(ff_.index(0,0,N5_-2)),Nvol_);   
  BGWilsonLA_MultAddScalar(w5_ptr,v_ptr,Params_.dm_[N5_-2],Nvol_);
  for(int s=0; s<N5_-1; ++s) {
    BGWilsonLA_Proj_P(ey_ptr,const_cast<Field&>(w5).getaddr(ff_.index(0,0,s)),Nvol_); 
    BGWilsonLA_MultAddScalar(w5_ptr,ey_ptr,-mq_*Params_.fs_[s],Nvol_);
  }
  BGWilsonLA_MultScalar(w5_ptr,w5_ptr,1.0/(Params_.dp_[N5_-1] +mq_*Params_.dm_[N5_-2]*Params_.es_[N5_-2]),Nvol_);
  
  for(int s=N5_-2; s>=0; --s){ 
    double* w5_ptr  = w5.getaddr(s*f4size_);
    double fact_lpf = (Params_.dm_[s+1]/Params_.dp_[s]);

    BGWilsonLA_Proj_P(lpf_ptr,const_cast<Field&>(w5).getaddr(ff_.index(0,0,s+1)),Nvol_); 
    BGWilsonLA_Proj_M(ey_ptr, const_cast<Field&>(w5).getaddr(ff_.index(0,0,N5_-1)),Nvol_);
    BGWilsonLA_AXPBYPZ(w5_ptr,lpf_ptr,ey_ptr,w5_ptr,fact_lpf,-mq_*Params_.es_[s],Nvol_);
  }
  return w5;
}

/*! @brief definitions of D_dwf */
void Dirac_optimalDomainWall::mult_full(Field& w5, const Field& f5) const{ 

#pragma disjoint
  Field lpf(f4size_), lmf(f4size_), v(f4size_),w(f4size_);
  double* v_ptr   = v.getaddr(0);
  double* lpf_ptr = lpf.getaddr(0);
  double* lmf_ptr = lmf.getaddr(0);
  double* w_ptr   = w.getaddr(0);

  for(int s=0; s<N5_; ++s){
    double* f5_ptr = const_cast<Field&>(f5).getaddr(s*f4size_);
    double* w5_ptr   = w5.getaddr(s*f4size_);

    BGWilsonLA_Proj_P(lpf_ptr,const_cast<Field&>(f5).getaddr(ff_.index(0,0,(s+N5_-1)%N5_)),Nvol_);
    BGWilsonLA_Proj_M(lmf_ptr,const_cast<Field&>(f5).getaddr(ff_.index(0,0,(s+1)%N5_)),Nvol_);
    
    if(     s==0)     BGWilsonLA_MultScalar_Add(lpf_ptr,lmf_ptr,-mq_,Nvol_);
    else if(s==N5_-1) BGWilsonLA_MultAddScalar(lpf_ptr,lmf_ptr,-mq_,Nvol_);
    else              BGWilsonLA_Add(lpf_ptr,lmf_ptr,Nvol_);

    BGWilsonLA_AXPBY(v_ptr,f5_ptr,lpf_ptr,Params_.bs_[s],Params_.cs_[s],Nvol_);
    
    Dw_->mult_ptr(w_ptr, v_ptr);  
    BGWilsonLA_AXPBYPZ(w5_ptr,w_ptr,lpf_ptr,f5_ptr,4.0+M0_,-1.0,Nvol_);
  }
}

void Dirac_optimalDomainWall::mult_dag_full(Field& w5,const Field& f5) const{
#pragma disjoint
  assert(w5.size()==f5.size());

  Field v5(f5size_);
  Field f4(f4size_), w(f4size_);
  Field lpf(f4size_), lmf(f4size_);
  
  int spin_idx;
  double* w_ptr = w.getaddr(0);
  
  for(int s=0; s<N5_; ++s){
    spin_idx = s*f4size_;
    double* f5_ptr = const_cast<Field&>(f5).getaddr(spin_idx);
    double* w5_ptr = w5.getaddr(spin_idx);
    double* v5_ptr = v5.getaddr(spin_idx);
    
    Dw_->mult_dag_ptr(w_ptr, f5_ptr);
    BGWilsonLA_AXPY(w5_ptr,w_ptr,f5_ptr,(4.0+M0_)*Params_.bs_[s],Nvol_);
    BGWilsonLA_AXMY(v5_ptr,w_ptr,f5_ptr,(4.0+M0_)*Params_.cs_[s],Nvol_);
  }
  
  for(int s=0; s<N5_; ++s){
    spin_idx = s*f4size_;
    double* w5_ptr = w5.getaddr(spin_idx);
    double* v5_ptr = v5.getaddr(spin_idx);
    
    BGWilsonLA_Proj_P(lpf.getaddr(0),const_cast<Field&>(v5).getaddr(ff_.index(0,0,(s+1)%N5_)),Nvol_);
    BGWilsonLA_Proj_M(lmf.getaddr(0),const_cast<Field&>(v5).getaddr(ff_.index(0,0,(s+N5_-1)%N5_)),Nvol_);
    
    if(s==N5_-1)  BGWilsonLA_AXPBYPZ(w5_ptr,lpf.getaddr(0),lmf.getaddr(0),w5_ptr,-mq_,1.0,Nvol_);
    else if(s==0) BGWilsonLA_AXPBYPZ(w5_ptr,lpf.getaddr(0),lmf.getaddr(0),w5_ptr,1.0,-mq_,Nvol_);
    else          BGWilsonLA_AXPBYPZ(w5_ptr, lpf.getaddr(0),lmf.getaddr(0),w5_ptr,1.0,1.0,Nvol_);
  }
}

void Dirac_optimalDomainWall::mult_offdiag(Field& w5,const Field& f5) const{ 
  
  Field lpf(f4size_), lmf(f4size_), w(f4size_), v(f4size_);
  double* w_ptr = w.getaddr(0);
  double* v_ptr = v.getaddr(0);
  double* lpf_ptr = lpf.getaddr(0);
  double* lmf_ptr = lmf.getaddr(0);
  double mass_fact= 4.0+M0_;
  double* f5_ptr  = const_cast<Field&>(f5).getaddr(0);
  double* w5_ptr  = w5.getaddr(0);
  
  /* here, Nvol_ is half-size */
  for(int s=0; s<N5_; ++s) {
    BGWilsonLA_Proj_P(lpf_ptr,const_cast<Field&>(f5).getaddr(ff_.index(0,0,(s+N5_-1)%N5_)),Nvol_);
    BGWilsonLA_Proj_M(lmf_ptr,const_cast<Field&>(f5).getaddr(ff_.index(0,0,(s+1)%N5_)),Nvol_);

    if(     s==0)     BGWilsonLA_MultScalar_Add(lpf_ptr,lmf_ptr,-mq_,Nvol_);
    else if(s==N5_-1) BGWilsonLA_MultAddScalar(lpf_ptr,lmf_ptr,-mq_,Nvol_);
    else              BGWilsonLA_Add(lpf_ptr,lmf_ptr,Nvol_);

    BGWilsonLA_AXPBY(v_ptr,f5_ptr,lpf_ptr,Params_.bs_[s],Params_.cs_[s],Nvol_);
    Dw_->mult_ptr_EO(w_ptr,v_ptr);

    BGWilsonLA_MultScalar(w5_ptr,w_ptr,mass_fact,Nvol_);
    
    f5_ptr += f4size_;
    w5_ptr += f4size_;
  }

}

void Dirac_optimalDomainWall::mult_dag_offdiag(Field& w5,const Field& f5) const{
  Field v5(f5size_),lpf(f4size_), lmf(f4size_),w(f4size_);
  double* w_ptr = w.getaddr(0);

  /* here, Nvol_ is half-size */
  for(int s=0; s<N5_; ++s){
    int spin_idx = s*f4size_;
    double* f5_ptr = const_cast<Field&>(f5).getaddr(spin_idx);
    double* w5_ptr = w5.getaddr(spin_idx);
    double* v5_ptr = v5.getaddr(spin_idx);
    
    double bs = (4.0+M0_)*Params_.bs_[s];
    double cs = (4.0+M0_)*Params_.cs_[s];

    Dw_->mult_dag_ptr_EO(w_ptr,f5_ptr);
 
    BGWilsonLA_MultScalar(w5_ptr,w_ptr,bs,Nvol_);
    BGWilsonLA_MultScalar(v5_ptr,w_ptr,cs,Nvol_);
  }
  for(int s=0; s<N5_; ++s){
    int spin_idx = s*f4size_;
    double* w5_ptr = w5.getaddr(spin_idx);
    double* v5_ptr = v5.getaddr(spin_idx);

    BGWilsonLA_Proj_P(lpf.getaddr(0),const_cast<Field&>(v5).getaddr(ff_.index(0,0,(s+1)%N5_)),Nvol_);
    BGWilsonLA_Proj_M(lmf.getaddr(0),const_cast<Field&>(v5).getaddr(ff_.index(0,0,(s+N5_-1)%N5_)),Nvol_);
    
    if(s == N5_-1) BGWilsonLA_AXPBYPZ(w5_ptr,lpf.getaddr(0),lmf.getaddr(0),w5_ptr,-mq_,1.0,Nvol_);
    else if(s==0)  BGWilsonLA_AXPBYPZ(w5_ptr,lpf.getaddr(0),lmf.getaddr(0),w5_ptr,1.0,-mq_,Nvol_);
    else           BGWilsonLA_AXPBYPZ(w5_ptr,lpf.getaddr(0),lmf.getaddr(0),w5_ptr,1.0,1.0,Nvol_);
  }
}

/*! @brief contribution to the MD-force from forward difference */
void Dirac_optimalDomainWall::
md_force_p(Field& fce,const Field& phi,const Field& psi)const{
  using namespace FieldExpression;
  register int Nvol = CommonPrms::instance()->Nvol()/2;

  Field lpf(f4size_), lmf(f4size_);
  Field w(f5size_);
  Spinor* lpf_ptr = (Spinor*)lpf.getaddr(0);
  Spinor* lmf_ptr = (Spinor*)lmf.getaddr(0);
  Spinor* w_ptr = (Spinor*)w.getaddr(0);
  Spinor* phi_ptr = (Spinor*)const_cast<Field&>(phi).getaddr(0);

  for(int s=0; s<N5_; ++s){
#pragma omp parallel 
    {
      int nid = omp_get_num_threads();
      int is = omp_get_thread_num()*Nvol/nid;
      int ns = Nvol/nid;
      
      BGWilsonLA_Proj_P(lpf_ptr+is,phi_ptr+((s+N5_-1)%N5_)*Nvol+is,ns); 
      if(s == 0)      BGWilsonLA_MultScalar(lpf_ptr+is, lpf_ptr+is,-mq_,ns);//  lpf *= -mq_;
      BGWilsonLA_Proj_M(lmf_ptr+is,phi_ptr +((s+1)%N5_)*Nvol+is,ns); 
      if(s == N5_-1)  BGWilsonLA_MultScalar(lmf_ptr+is, lmf_ptr+is,-mq_,ns);//lmf *= -mq_;
      
      BGWilsonLA_Add(lpf_ptr+is,lmf_ptr+is,ns);
      BGWilsonLA_MultScalar(w_ptr+is, phi_ptr+s*Nvol+is, Params_.bs_[s],ns);
      BGWilsonLA_MultAddScalar(w_ptr+is, lpf_ptr+is, Params_.cs_[s],ns);
    }
    Dw_->md_force_p(fce,w,get4d(psi,s));
  }

} 

/*! @brief contribution to the MD-force from backward difference */
void Dirac_optimalDomainWall::
md_force_m(Field& fce,const Field& phi,const Field& psi)const{

  using namespace FieldExpression;
  register int Nvol = CommonPrms::instance()->Nvol()/2;

  Field lpf(f4size_), lmf(f4size_);
  Field w(f5size_);
  Spinor* lpf_ptr = (Spinor*)lpf.getaddr(0);
  Spinor* lmf_ptr = (Spinor*)lmf.getaddr(0);
  Spinor* w_ptr   = (Spinor*)w.getaddr(0);
  Spinor* phi_ptr = (Spinor*)const_cast<Field&>(phi).getaddr(0);
 
  for(int s=0; s<N5_; ++s){
#pragma omp parallel 
    {
      int nid = omp_get_num_threads();
      int ns = Nvol/nid;
      int is = omp_get_thread_num()*ns;
      
      BGWilsonLA_Proj_P(lpf_ptr+is,phi_ptr+((s+N5_-1)%N5_)*Nvol+is,ns); 
      if(s == 0)     BGWilsonLA_MultScalar(lpf_ptr+is, lpf_ptr+is,-mq_,ns);// lpf *= -mq_;
      BGWilsonLA_Proj_M(lmf_ptr+is,phi_ptr +((s+1)%N5_)*Nvol+is,ns); 
      if(s == N5_-1) BGWilsonLA_MultScalar(lmf_ptr+is, lmf_ptr+is,-mq_,ns);//lmf *= -mq_;
      
      BGWilsonLA_Add(lpf_ptr+is,lmf_ptr+is,ns);
      BGWilsonLA_MultScalar(w_ptr+is, phi_ptr+s*Nvol+is, Params_.bs_[s],ns);
      BGWilsonLA_MultAddScalar(w_ptr+is, lpf_ptr+is, Params_.cs_[s],ns);
    }
    Dw_->md_force_m(fce,w,get4d(psi,s));
  }

}  

void Dirac_optimalDomainWall::mult_hop_omp(Field& w5, const void* f5) const{
  int nid = omp_get_num_threads();
  int tid = omp_get_thread_num();

  BGQThread_Barrier(0,nid);
  if(tid == 0) BGWilson_DW_Init(N5_,mq_,M0_, 
				(double*)&Params_.dp_[0],(double*)&Params_.dm_[0],
				(double*)&Params_.bs_[0],(double*)&Params_.cs_[0],
				(double*)&Params_.es_[0],(double*)&Params_.fs_[0]);
  BGQThread_Barrier(0,nid);
  double kappa = 0.5/(4.0+M0_);
  double* u = const_cast<Field *>(Dw_->getGaugeField_ptr())->getaddr(0);
  BGWilson_DW_Mult_hop(w5.getaddr(0),(void*)u,(void*)f5,kappa,BGWILSON_DIRAC);
}

void Dirac_optimalDomainWall::mult_hop_dag_omp(Field& w5, const void* f5) const{
  int nid = omp_get_num_threads();
  int tid = omp_get_thread_num();

  BGQThread_Barrier(0,nid);

  if(tid == 0) {
    BGWilson_DW_Init(N5_,mq_,M0_,
		     (double*)&Params_.dp_[0],(double*)&Params_.dm_[0],
		     (double*)&Params_.bs_[0],(double*)&Params_.cs_[0],
		     (double*)&Params_.es_[0],(double*)&Params_.fs_[0]);
  }
  BGQThread_Barrier(0,nid);

  double kappa = 0.5/(4.0+M0_);
  double* u = const_cast<Field *>(Dw_->getGaugeField_ptr())->getaddr(0);

  BGWilson_DW_Mult_hop_dag(w5.getaddr(0),(void*)u,(void*)f5,
			   kappa,BGWILSON_DIRAC);

}

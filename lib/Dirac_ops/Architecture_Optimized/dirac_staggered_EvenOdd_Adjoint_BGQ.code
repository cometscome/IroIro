//Using bgq instrinsics
// and the fact that NC*NC-1 = 8
#include <omp.h>
#include "bgqthread.h"

using namespace SiteMap;

void Dirac_staggered_EvenOdd_Adjoint::multPeo(Field& we,const Field& fo,int mu) const{
    /// boundary part ///
    int Nbdry = shiftSite_oe.slice_size(0,mu);
    register int boundary_size = Nin_*Nbdry;
    double* res_base = we.getaddr(0);
    
    double* U_base = const_cast<Field&>(ue_.data).getaddr(0);
    double* v_base = const_cast<Field&>(fo).getaddr(0);
    
    
    const int nid = omp_get_num_threads();
    const int tid = omp_get_thread_num();
    int is = tid*Nbdry/nid;
    int ie = (tid + 1)*Nbdry/nid;
    int ns = ie - is;
    double* res;
    double temp[4];

    double* vbd_ptr = (double*)BGQThread_Malloc(boundary_size*sizeof(double), nid);
    double* vbc_ptr = (double*)BGQThread_Malloc(boundary_size*sizeof(double), nid);
    BGQThread_Barrier(0, nid);


    
    for(int k=is; k<(is+ns); ++k)
      memcpy(vbd_ptr+k*Nin_, v_base + (NC_*NC_-1)*shiftSite_oe.xslice(0,k,mu), Nin_*sizeof(double));
    
    BGQThread_Barrier(0, nid);
    if (tid == 0)
    Communicator::instance()->transfer_fw(vbc_ptr,vbd_ptr,boundary_size,mu);
    BGQThread_Barrier(0, nid);    

    
    int Xb = SiteIndex::instance()->Bdir(mu);
    
    for(int k=is; k<(is+ns); ++k){  /*!< @brief calc on the upper boundary */   
      int xc = shiftSite_eo.xslice(Xb,k,mu);
      double* U = U_base + (NC_*NC_-1)*(NC_*NC_-1)*(xc + Nvh_*mu);
      res = res_base + (NC_*NC_-1)*xc;
      
      vector4double v4_1 = vec_ld(k*Nin_*sizeof(double), vbc_ptr);
      vector4double v4_2 = vec_ld((k*Nin_+4)*sizeof(double), vbc_ptr);
      for(int a=0; a<Nin_; ++a){
	vector4double u4 = vec_ld(a*(NC_*NC_-1)*sizeof(double), U);
	vector4double m4 = vec_mul(v4_1,u4);
	u4 = vec_ld((a*(NC_*NC_-1)+4)*sizeof(double), U);
	vector4double m4_2 = vec_madd(v4_2,u4,m4);
	vec_st(m4_2, 0, &temp[0]);
	res[a] += temp[0]+temp[1]+temp[2]+temp[3];
      }
    }
    
    
    /// bulk part ///
    for(int x=0; x<Xb; ++x){
      int Nslice = shiftSite_eo.slice_size(x,mu);
      for(int k = tid*Nslice/nid ; k < (tid+1)*Nslice/nid; ++k){   
	double* v = v_base + (NC_*NC_-1)*shiftSite_oe.xslice(x+1,k,mu);
	int xc = shiftSite_eo.xslice(x,k,mu);
	double* U = U_base + (NC_*NC_-1)*(NC_*NC_-1)*(xc + Nvh_*mu);
	res = res_base + (NC_*NC_-1)*xc;
	
	vector4double v4_1 = vec_ld(0, v);
	vector4double v4_2 = vec_ld(4*sizeof(double), v);
	for(int a=0; a<Nin_; ++a){
	  vector4double u4 = vec_ld((a*(NC_*NC_-1))*sizeof(double), U);
	  vector4double m4 = vec_mul(v4_1,u4);
	  u4 = vec_ld((a*(NC_*NC_-1)+4)*sizeof(double), U);
	  vector4double m4_2 = vec_madd(v4_2,u4,m4);
	  vec_st(m4_2, 0, &temp[0]);
	  res[a] += temp[0]+temp[1]+temp[2]+temp[3];
	  
	}
      }
    }
    BGQThread_Barrier(0, nid);
    BGQThread_Free(vbd_ptr,tid);
    BGQThread_Free(vbc_ptr,tid);
    
    
    
}

void Dirac_staggered_EvenOdd_Adjoint::multPoe(Field& wo,const Field& fe,int mu) const{
  /// boundary part ///

    int Nbdry = shiftSite_eo.slice_size(0,mu);
    register int boundary_size = Nin_*Nbdry;
    double* res_base = wo.getaddr(0);
    double* U_base = const_cast<Field&>(uo_.data).getaddr(0);
    double* v_base = const_cast<Field&>(fe).getaddr(0);
    int Xb = SiteIndex::instance()->Bdir(mu);
    
    double* res;   
    double* U;
    double temp[4];
    const int nid = omp_get_num_threads();
    const int tid = omp_get_thread_num();
    int is = tid*Nbdry/nid;
    int ie = (tid + 1)*Nbdry/nid;
    int ns = ie - is;

    double* vbd_ptr = (double*)BGQThread_Malloc(boundary_size*sizeof(double), nid);
    double* vbc_ptr = (double*)BGQThread_Malloc(boundary_size*sizeof(double), nid);
    BGQThread_Barrier(0, nid);
    
    for(int k=is; k< (is+ns); ++k)
      memcpy(vbd_ptr+k*Nin_, v_base + (NC_*NC_-1)*shiftSite_eo.xslice(0,k,mu), Nin_*sizeof(double));
    
    
    BGQThread_Barrier(0, nid);
    if (tid == 0)
      Communicator::instance()->transfer_fw(vbc_ptr,vbd_ptr,boundary_size,mu);
    BGQThread_Barrier(0, nid);
    
    for(int k= is; k<  (is+ns); ++k){  /*!< @brief calc on the upper boundary */   
      int xc = shiftSite_oe.xslice(Xb,k,mu);
      U   = U_base   + (NC_*NC_-1)*(NC_*NC_-1)*(xc + Nvh_*mu);
      res = res_base + (NC_*NC_-1)*xc;
      
      vector4double v4_1 = vec_ld(k*Nin_*sizeof(double), vbc_ptr);
      vector4double v4_2 = vec_ld((k*Nin_+4)*sizeof(double), vbc_ptr);
      for(int a=0; a<Nin_; ++a){
	vector4double u4 = vec_ld(a*(NC_*NC_-1)*sizeof(double), U);
	vector4double m4 = vec_mul(v4_1,u4);
	u4 = vec_ld((a*(NC_*NC_-1)+4)*sizeof(double), U);
	vector4double m4_2 = vec_madd(v4_2,u4,m4);
	vec_st(m4_2, 0, &temp[0]);
	res[a] += temp[0]+temp[1]+temp[2]+temp[3];
      }
    }
    
    /// bulk part ///
    for(int x=0; x<Xb; ++x){
      int Nslice = shiftSite_oe.slice_size(x,mu);
      
      
      for(int k= tid*Nslice/nid; k<(tid+1)*Nslice/nid; ++k){   
	int xc = shiftSite_oe.xslice(x,k,mu);
	double* v = v_base + (NC_*NC_-1)*shiftSite_eo.xslice(x+1,k,mu);
	U   = U_base   + (NC_*NC_-1)*(NC_*NC_-1)*(xc + Nvh_*mu);
	res = res_base + (NC_*NC_-1)*xc;
	
	vector4double v4_1 = vec_ld(0, v);
	vector4double v4_2 = vec_ld(4*sizeof(double), v);
	for(int a=0; a<Nin_; ++a){
	  vector4double u4 = vec_ld((a*(NC_*NC_-1))*sizeof(double), U);
	  vector4double m4 = vec_mul(v4_1,u4);
	  u4 = vec_ld((a*(NC_*NC_-1)+4)*sizeof(double), U);
	  vector4double m4_2 = vec_madd(v4_2,u4,m4);
	  vec_st(m4_2, 0, &temp[0]);
	  res[a] += temp[0]+temp[1]+temp[2]+temp[3];
	}
      }
    }

    BGQThread_Barrier(0, nid);
    BGQThread_Free(vbd_ptr,tid);
    BGQThread_Free(vbc_ptr,tid);

  
}

const Field Dirac_staggered_EvenOdd_Adjoint::mult_eo(const Field& fo) const{
  Field we(fsize_);
  double* v_base   = const_cast<Field&>(fo).getaddr(0);
  double* U_base   = const_cast<Field&>(uo_.data).getaddr(0);
  double* Ue_base  = const_cast<Field&>(ue_.data).getaddr(0);
  double* res_base = we.getaddr(0);

  static bool is_initialized = false;
  static double* bdr_in[4];
  static double* bdr_out[4];
  static double* bdr_up_in[4];
  static double* bdr_up_out[4];


  if (!is_initialized){
    is_initialized = true;
    for(int mu=0;mu<Ndim_; ++mu){
      int Xb = SiteIndex::instance()->Bdir(mu);
      int Nbdry = shiftSite_oe.slice_size(Xb,mu);
      register int boundary_size = Nin_*Nbdry;
      bdr_in[mu] = (double*)malloc(boundary_size*sizeof(double));
      bdr_out[mu] = (double*)malloc(boundary_size*sizeof(double));
      bdr_up_in[mu] = (double*)malloc(boundary_size*sizeof(double));
      bdr_up_out[mu] = (double*)malloc(boundary_size*sizeof(double));

    }
  }
  

#pragma omp parallel 
    {
      double *res;
      const int nid = omp_get_num_threads();
      const int tid = omp_get_thread_num();
      double temp[4];

      for(int mu=0;mu<Ndim_; ++mu){
	int Xb = SiteIndex::instance()->Bdir(mu);
	int Nbdry = shiftSite_oe.slice_size(Xb,mu);
	register int boundary_size = Nin_*Nbdry;
	int is = tid*Nbdry/nid;
	int ie = (tid + 1)*Nbdry/nid;
	int ns = ie - is;
	
	for(int k=is; k<(is+ns); ++k){
	  memcpy(bdr_in[mu]+k*Nin_, v_base + (NC_*NC_-1)*shiftSite_oe.xslice(0,k,mu), Nin_*sizeof(double));
	  
	  int xc = shiftSite_oe.xslice(Xb,k,mu);
	  double* v = v_base + (NC_*NC_-1)*xc;
	  double* U = U_base + (NC_*NC_-1)*(NC_*NC_-1)*(xc + Nvh_*mu);
	  
	  vector4double vup = (vector4double)(0.0);
	  vector4double vdn = (vector4double)(0.0);
	  for(int a=0; a<Nin_; ++a){
	    vector4double v4 = vec_lds(a*sizeof(double), v);
	    vector4double u4 = vec_ld((a*(NC_*NC_-1))*sizeof(double), U);
	    vup = vec_madd(v4,u4, vup);
	    u4 = vec_ld((a*(NC_*NC_-1)+4)*sizeof(double), U);
	    vdn = vec_madd(v4,u4, vdn);
	  }
	  vec_st(vup, k*Nin_*sizeof(double), bdr_up_in[mu]);
	  vec_st(vdn, (k*Nin_+4)*sizeof(double), bdr_up_in[mu]);
	  
	}
	
	BGQThread_Barrier(0, nid);
	if (tid == 0){
	  Communicator::instance()->transfer_bk(bdr_up_out[mu],bdr_up_in[mu],boundary_size,mu);
	  Communicator::instance()->transfer_fw(bdr_out[mu],bdr_in[mu],boundary_size,mu);
	}
	BGQThread_Barrier(0, nid);    
	
	
	for(int k=is; k<(is+ns); ++k){  /*!< @brief calc on the upper boundary */   
	  int xc = shiftSite_eo.xslice(Xb,k,mu);
	  double* U = Ue_base + (NC_*NC_-1)*(NC_*NC_-1)*(xc + Nvh_*mu);
	  res = res_base + (NC_*NC_-1)*xc;
	  
	  vector4double v4_1 = vec_ld(k*Nin_*sizeof(double), bdr_out[mu]);
	  vector4double v4_2 = vec_ld((k*Nin_+4)*sizeof(double), bdr_out[mu]);
	  for(int a=0; a<Nin_; ++a){
	    vector4double u4 = vec_ld(a*(NC_*NC_-1)*sizeof(double), U);
	    vector4double m4 = vec_mul(v4_1,u4);
	    u4 = vec_ld((a*(NC_*NC_-1)+4)*sizeof(double), U);
	    vector4double m4_2 = vec_madd(v4_2,u4,m4);
	    vec_st(m4_2, 0, &temp[0]);
	    res[a] += temp[0]+temp[1]+temp[2]+temp[3];
	  }


	  double* res = res_base + (NC_*NC_-1)*shiftSite_eo.xslice(0,k,mu);
	  vector4double vup = vec_ld(k*Nin_*sizeof(double), bdr_up_out[mu]);
	  vector4double vdn = vec_ld((k*Nin_+4)*sizeof(double), bdr_up_out[mu]);
	  vector4double rup = vec_ld(0, res);
	  vector4double rdn = vec_ld(4*sizeof(double), res);
	  rup = vec_sub(rup,vup);
	  rdn = vec_sub(rdn,vdn);
	  vec_st(rup, 0, res);
	  vec_st(rdn, 4*sizeof(double), res);


	}
	
	
	/// bulk part ///
	for(int x=0; x<Xb; ++x){
	  int Nslice = shiftSite_eo.slice_size(x,mu);
	  for(int k = tid*Nslice/nid ; k < (tid+1)*Nslice/nid; ++k){   
	    double* v = v_base + (NC_*NC_-1)*shiftSite_oe.xslice(x+1,k,mu);
	    int xc = shiftSite_eo.xslice(x,k,mu);
	    double* U = Ue_base + (NC_*NC_-1)*(NC_*NC_-1)*(xc + Nvh_*mu);
	    res = res_base + (NC_*NC_-1)*xc;
	    
	    vector4double v4_1 = vec_ld(0, v);
	    vector4double v4_2 = vec_ld(4*sizeof(double), v);
	    for(int a=0; a<Nin_; ++a){
	      vector4double u4 = vec_ld((a*(NC_*NC_-1))*sizeof(double), U);
	      vector4double m4 = vec_mul(v4_1,u4);
	      u4 = vec_ld((a*(NC_*NC_-1)+4)*sizeof(double), U);
	      vector4double m4_2 = vec_madd(v4_2,u4,m4);
	      vec_st(m4_2, 0, &temp[0]);
	      res[a] += temp[0]+temp[1]+temp[2]+temp[3];
	      
	    }
	  }
	}

	int Nmu = SiteIndex::instance()->Bdir(mu)+1;
	for(int x=1; x<Nmu; ++x){
	  int Nslice = shiftSite_oe.slice_size(x,mu);
	  for(int k=tid*Nslice/nid; k<(tid+1)*Nslice/nid; ++k){
	    int xm = shiftSite_oe.xslice(x-1,k,mu);
	    double* v = v_base + (NC_*NC_-1)*xm;
	    double* U = U_base + (NC_*NC_-1)*(NC_*NC_-1)*(xm + Nvh_*mu);
	    
	    double* res = res_base + (NC_*NC_-1)*shiftSite_eo.xslice(x,k,mu);
	    
	    vector4double vup = vec_ld(0, res);
	    vector4double vdn = vec_ld(4*sizeof(double), res);
	    for(int a=0; a<Nin_; ++a){
	      vector4double v4 = vec_lds(a*sizeof(double), v);
	      vector4double nv4 = vec_neg(v4);
	      vector4double u4 = vec_ld((a*(NC_*NC_-1))*sizeof(double), U);
	      vup = vec_madd(nv4,u4, vup);
	      u4 = vec_ld((a*(NC_*NC_-1)+4)*sizeof(double), U);
	      vdn = vec_madd(nv4,u4, vdn);
	    }
	    vec_st(vup, 0, res);
	    vec_st(vdn, 4*sizeof(double), res);
	    
	  }
	}
      }
    }
    return we;
}

const Field Dirac_staggered_EvenOdd_Adjoint::mult_oe(const Field& fe) const{
  BGQThread_Init();
  double* U_base = const_cast<Field&>(uo_.data).getaddr(0);
  double* Ue_base = const_cast<Field&>(ue_.data).getaddr(0);
  double* v_base = const_cast<Field&>(fe).getaddr(0);

  Field wo(fsize_);
  double* res_base = wo.getaddr(0);
#pragma omp parallel
  {
    const int nid = omp_get_num_threads();
    const int tid = omp_get_thread_num();

  for(int mu=0;mu<Ndim_; ++mu){
    int Xb = SiteIndex::instance()->Bdir(mu);
    int Nbdry = shiftSite_eo.slice_size(Xb,mu);
    int boundary_size = Nin_*Nbdry;
    int is = tid*Nbdry/nid;
    int ie = (tid + 1)*Nbdry/nid;
    int ns = ie - is;
    
    //multPoe(wo,fe,mu);
    
    double* res;   
    double* U, *Ue;
    double temp[4];

    double* vbd_ptr = (double*)BGQThread_Malloc(boundary_size*sizeof(double), nid);
    double* vbc_ptr = (double*)BGQThread_Malloc(boundary_size*sizeof(double), nid);
    BGQThread_Barrier(0, nid);
    
    for(int k=is; k< (is+ns); ++k)
      memcpy(vbd_ptr+k*Nin_, v_base + (NC_*NC_-1)*shiftSite_eo.xslice(0,k,mu), Nin_*sizeof(double));
    
    
    BGQThread_Barrier(0, nid);
    if (tid == 0)
      Communicator::instance()->transfer_fw(vbc_ptr,vbd_ptr,boundary_size,mu);
    BGQThread_Barrier(0, nid);
    
    for(int k= is; k<  (is+ns); ++k){  /*!< @brief calc on the upper boundary */   
      int xc = shiftSite_oe.xslice(Xb,k,mu);
      U   = U_base   + (NC_*NC_-1)*(NC_*NC_-1)*(xc + Nvh_*mu);
      res = res_base + (NC_*NC_-1)*xc;
      
      xc = shiftSite_eo.xslice(Xb,k,mu);
      double* v = v_base + (NC_*NC_-1)*xc;//const_cast<Field&>(fe).getaddr(ff_.index(0,xc));
      Ue   = Ue_base   + (NC_*NC_-1)*(NC_*NC_-1)*(xc + Nvh_*mu);
      
      
      vector4double v4_1 = vec_ld(k*Nin_*sizeof(double), vbc_ptr);
      vector4double v4_2 = vec_ld((k*Nin_+4)*sizeof(double), vbc_ptr);
      vector4double vup = (vector4double)(0.0);
      vector4double vdn = (vector4double)(0.0);
      for(int a=0; a<Nin_; ++a){
	vector4double u4 = vec_ld(a*(NC_*NC_-1)*sizeof(double), U);
	vector4double m4 = vec_mul(v4_1,u4);
	u4 = vec_ld((a*(NC_*NC_-1)+4)*sizeof(double), U);
	vector4double m4_2 = vec_madd(v4_2,u4,m4);
	vec_st(m4_2, 0, &temp[0]);
	res[a] += temp[0]+temp[1]+temp[2]+temp[3];

        vector4double v4 = vec_lds(a*sizeof(double), v);
        vector4double w4 = vec_ld((a*(NC_*NC_-1))*sizeof(double), Ue);
        vup = vec_madd(v4,w4, vup);
        w4 = vec_ld((a*(NC_*NC_-1)+4)*sizeof(double), Ue);
        vdn = vec_madd(v4,w4, vdn);
      }
      
      vec_st(vup, k*Nin_*sizeof(double), vbd_ptr);
      vec_st(vdn, (k*Nin_ +4)*sizeof(double), vbd_ptr);

    }

    BGQThread_Barrier(0, nid);
    if (tid == 0)
      Communicator::instance()->transfer_bk(vbc_ptr,vbd_ptr,boundary_size,mu);
    BGQThread_Barrier(0, nid);


    
    /// bulk part ///
    for(int x=0; x<Xb; ++x){
      int Nslice = shiftSite_oe.slice_size(x,mu);
      
      
      for(int k= tid*Nslice/nid; k<(tid+1)*Nslice/nid; ++k){   
	int xc = shiftSite_oe.xslice(x,k,mu);
	double* v = v_base + (NC_*NC_-1)*shiftSite_eo.xslice(x+1,k,mu);
	U   = U_base   + (NC_*NC_-1)*(NC_*NC_-1)*(xc + Nvh_*mu);
	res = res_base + (NC_*NC_-1)*xc;
	
	vector4double v4_1 = vec_ld(0, v);
	vector4double v4_2 = vec_ld(4*sizeof(double), v);
	for(int a=0; a<Nin_; ++a){
	  vector4double u4 = vec_ld((a*(NC_*NC_-1))*sizeof(double), U);
	  vector4double m4 = vec_mul(v4_1,u4);
	  u4 = vec_ld((a*(NC_*NC_-1)+4)*sizeof(double), U);
	  vector4double m4_2 = vec_madd(v4_2,u4,m4);
	  vec_st(m4_2, 0, &temp[0]);
	  res[a] += temp[0]+temp[1]+temp[2]+temp[3];
	}
      }
    }
    


    for(int k=is; k< (is+ns); ++k){
      double* res = wo.getaddr(ff_.index(0,shiftSite_oe.xslice(0,k,mu)));
      vector4double vup = vec_ld(k*Nin_*sizeof(double), vbc_ptr);
      vector4double vdn = vec_ld((k*Nin_+4)*sizeof(double), vbc_ptr);
      vector4double rup = vec_ld(0, res);
      vector4double rdn = vec_ld(4*sizeof(double), res);
      rup = vec_sub(rup,vup);
      rdn = vec_sub(rdn,vdn);
      vec_st(rup, 0, res);
      vec_st(rdn, 4*sizeof(double), res);
    }


    /// bulk part ///
    int Nmu = SiteIndex::instance()->Bdir(mu)+1;
    for(int x=1; x<Nmu; ++x){
      int Nslice = shiftSite_eo.slice_size(x,mu);
      for(int k=tid*Nslice/nid; k< (tid+1)*Nslice/nid; ++k){
	int xm = shiftSite_eo.xslice(x-1,k,mu);
	double* v = const_cast<Field&>(fe).getaddr(ff_.index(0,xm));
	double* U = const_cast<Field&>(ue_.data).getaddr(gf_.index(0,xm,mu));
	double* res = wo.getaddr(ff_.index(0,shiftSite_oe.xslice(x,k,mu)));

        vector4double vup = vec_ld(0, res);
        vector4double vdn = vec_ld(4*sizeof(double), res);
        for(int a=0; a<Nin_; ++a){
          vector4double v4 = vec_lds(a*sizeof(double), v);
          vector4double nv4 = vec_neg(v4);
          vector4double u4 = vec_ld((a*(NC_*NC_-1))*sizeof(double), U);
          vup = vec_madd(nv4,u4, vup);
          u4 = vec_ld((a*(NC_*NC_-1)+4)*sizeof(double), U);
          vdn = vec_madd(nv4,u4, vdn);
        }
        vec_st(vup, 0, res);
        vec_st(vdn, 4*sizeof(double), res);

      }
    }
  BGQThread_Barrier(0, nid);
  BGQThread_Free(vbd_ptr,tid);
  BGQThread_Free(vbc_ptr,tid);
  }




  }
  return wo;
}



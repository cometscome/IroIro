/* Standard Wilson-Dirac Kernel */

void Dirac_Wilson::mult_xp(Field& fp, const Field& f) const{
  int Nih = ND_*NC_; 
  int Nbdry = bdry_plw_[0].size();
  int Nbulk = bulk_pup_[0].size();

  /// boundary part ///
  double vbd[Nih*Nbdry]; 
  int is = 0;
  for(int k=0; k<Nbdry; ++k){
    int site = bdry_plw_[0][k];
    for(int c=0; c<NC_; ++c){
      vbd[r0(c)+is] = f[ff_.index_r(c,0,site)] -f[ff_.index_i(c,3,site)];
      vbd[i0(c)+is] = f[ff_.index_i(c,0,site)] +f[ff_.index_r(c,3,site)];
      vbd[r1(c)+is] = f[ff_.index_r(c,1,site)] -f[ff_.index_i(c,2,site)];
      vbd[i1(c)+is] = f[ff_.index_i(c,1,site)] +f[ff_.index_r(c,2,site)];
    }
    is += Nih;
  }
  double vbc[Nih*Nbdry]; 
  comm_->transfer_fw(vbc,vbd,Nih*Nbdry,0);

  double v1r[NC_], v1i[NC_], v2r[NC_], v2i[NC_];   
  double U[2*NC_*NC_];
  is = 0;
  for(int k=0; k<Nbdry; ++k){  
    int site = bdry_pup_[0][k];    

    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gp)(site),0)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gp)(site),0)];
      }
    }
    for(int c=0; c<NC_; ++c){
      v1r[c] = 0.0; v1i[c] = 0.0;
      v2r[c] = 0.0; v2i[c] = 0.0;
      
      for(int c1=0; c1<NC_; ++c1){
	v1r[c]+= U[re(c,c1)]*vbc[r0(c1)+is] -U[im(c,c1)]*vbc[i0(c1)+is];
	v1i[c]+= U[im(c,c1)]*vbc[r0(c1)+is] +U[re(c,c1)]*vbc[i0(c1)+is];
	v2r[c]+= U[re(c,c1)]*vbc[r1(c1)+is] -U[im(c,c1)]*vbc[i1(c1)+is];
	v2i[c]+= U[im(c,c1)]*vbc[r1(c1)+is] +U[re(c,c1)]*vbc[i1(c1)+is];
      }
      fp.add(ff_.index_r(c,0,site), v1r[c]);
      fp.add(ff_.index_i(c,0,site), v1i[c]);
      fp.add(ff_.index_r(c,1,site), v2r[c]);
      fp.add(ff_.index_i(c,1,site), v2i[c]);
      fp.add(ff_.index_r(c,2,site), v2i[c]);
      fp.add(ff_.index_i(c,2,site),-v2r[c]);
      fp.add(ff_.index_r(c,3,site), v1i[c]);
      fp.add(ff_.index_i(c,3,site),-v1r[c]);
    }
    is += Nih;
  }
  /// bulk part ///
  double w1r[NC_], w1i[NC_], w2r[NC_], w2i[NC_];
  for(int k=0; k<Nbulk; ++k){

    int site = bulk_pup_[0][k];
    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gp)(site),0)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gp)(site),0)];
      }
    }
    //int xp = (this->*xp)(site,0);
    int xp = map_->xp(site,0);
    for(int c=0; c<NC_; ++c){
      w1r[c] = f[ff_.index_r(c,0,xp)] -f[ff_.index_i(c,3,xp)];
      w1i[c] = f[ff_.index_i(c,0,xp)] +f[ff_.index_r(c,3,xp)];
      w2r[c] = f[ff_.index_r(c,1,xp)] -f[ff_.index_i(c,2,xp)];
      w2i[c] = f[ff_.index_i(c,1,xp)] +f[ff_.index_r(c,2,xp)];
    }
    for(int c=0; c<NC_; ++c){
      v1r[c] = 0.0;  v1i[c] = 0.0;
      v2r[c] = 0.0;  v2i[c] = 0.0;
      
      for(int c1=0; c1<NC_; ++c1){
	v1r[c] += U[re(c,c1)]*w1r[c1] -U[im(c,c1)]*w1i[c1];
	v1i[c] += U[im(c,c1)]*w1r[c1] +U[re(c,c1)]*w1i[c1];
	v2r[c] += U[re(c,c1)]*w2r[c1] -U[im(c,c1)]*w2i[c1];
	v2i[c] += U[im(c,c1)]*w2r[c1] +U[re(c,c1)]*w2i[c1];
      }
      fp.add(ff_.index_r(c,0,site), v1r[c]);
      fp.add(ff_.index_i(c,0,site), v1i[c]);
      fp.add(ff_.index_r(c,1,site), v2r[c]);
      fp.add(ff_.index_i(c,1,site), v2i[c]);
      fp.add(ff_.index_r(c,2,site), v2i[c]);
      fp.add(ff_.index_i(c,2,site),-v2r[c]);
      fp.add(ff_.index_r(c,3,site), v1i[c]);
      fp.add(ff_.index_i(c,3,site),-v1r[c]);
    }
  }
}

void Dirac_Wilson::mult_yp(Field& fp, const Field& f) const{
  int Nih = ND_*NC_; 
  int Nbdry = bdry_plw_[1].size();
  int Nbulk = bulk_pup_[1].size();

  /// boundary part ///
  double vbd[Nih*Nbdry]; 
  int is = 0;
  for(int k=0; k<Nbdry; ++k){
    int site = bdry_plw_[1][k];
    for(int c=0; c<NC_; ++c){
      vbd[r0(c)+is] = f[ff_.index_r(c,0,site)] +f[ff_.index_r(c,3,site)];
      vbd[i0(c)+is] = f[ff_.index_i(c,0,site)] +f[ff_.index_i(c,3,site)];
      vbd[r1(c)+is] = f[ff_.index_r(c,1,site)] -f[ff_.index_r(c,2,site)];
      vbd[i1(c)+is] = f[ff_.index_i(c,1,site)] -f[ff_.index_i(c,2,site)];
    }
    is += Nih;
  }
  double vbc[Nih*Nbdry]; 
  comm_->transfer_fw(vbc,vbd,Nih*Nbdry,1);

  double v1r[NC_], v1i[NC_], v2r[NC_], v2i[NC_];   
  double U[2*NC_*NC_];
  is = 0;
  for(int k=0; k<Nbdry; ++k){  
    int site = bdry_pup_[1][k];    

    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gp)(site),1)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gp)(site),1)];
      }
    }
    for(int c=0; c<NC_; ++c){
      v1r[c] = 0.0; v1i[c] = 0.0;
      v2r[c] = 0.0; v2i[c] = 0.0;
      
      for(int c1=0; c1<NC_; ++c1){
	v1r[c]+= U[re(c,c1)]*vbc[r0(c1)+is] -U[im(c,c1)]*vbc[i0(c1)+is];
	v1i[c]+= U[im(c,c1)]*vbc[r0(c1)+is] +U[re(c,c1)]*vbc[i0(c1)+is];
	v2r[c]+= U[re(c,c1)]*vbc[r1(c1)+is] -U[im(c,c1)]*vbc[i1(c1)+is];
	v2i[c]+= U[im(c,c1)]*vbc[r1(c1)+is] +U[re(c,c1)]*vbc[i1(c1)+is];
      }
      fp.add(ff_.index_r(c,0,site), v1r[c]);
      fp.add(ff_.index_i(c,0,site), v1i[c]);
      fp.add(ff_.index_r(c,1,site), v2r[c]);
      fp.add(ff_.index_i(c,1,site), v2i[c]);
      fp.add(ff_.index_r(c,2,site),-v2r[c]);
      fp.add(ff_.index_i(c,2,site),-v2i[c]);
      fp.add(ff_.index_r(c,3,site), v1r[c]);
      fp.add(ff_.index_i(c,3,site), v1i[c]);
    }
    is += Nih;
  }
  /// bulk part ///
  double w1r[NC_], w1i[NC_], w2r[NC_], w2i[NC_];
  for(int k=0; k<Nbulk; ++k){

    int site = bulk_pup_[1][k];
    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gp)(site),1)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gp)(site),1)];
      }
    }
    //int yp = (this->*xp)(site,1);
    int yp = map_->xp(site,1);
    for(int c=0; c<NC_; ++c){
      w1r[c] = f[ff_.index_r(c,0,yp)] +f[ff_.index_r(c,3,yp)];
      w1i[c] = f[ff_.index_i(c,0,yp)] +f[ff_.index_i(c,3,yp)];
      w2r[c] = f[ff_.index_r(c,1,yp)] -f[ff_.index_r(c,2,yp)];
      w2i[c] = f[ff_.index_i(c,1,yp)] -f[ff_.index_i(c,2,yp)];
    }
    for(int c=0; c<NC_; ++c){
      v1r[c] = 0.0;  v1i[c] = 0.0;
      v2r[c] = 0.0;  v2i[c] = 0.0;
      
      for(int c1=0; c1<NC_; ++c1){
	v1r[c] += U[re(c,c1)]*w1r[c1] -U[im(c,c1)]*w1i[c1];
	v1i[c] += U[im(c,c1)]*w1r[c1] +U[re(c,c1)]*w1i[c1];
	v2r[c] += U[re(c,c1)]*w2r[c1] -U[im(c,c1)]*w2i[c1];
	v2i[c] += U[im(c,c1)]*w2r[c1] +U[re(c,c1)]*w2i[c1];
      }
      fp.add(ff_.index_r(c,0,site), v1r[c]);
      fp.add(ff_.index_i(c,0,site), v1i[c]);
      fp.add(ff_.index_r(c,1,site), v2r[c]);
      fp.add(ff_.index_i(c,1,site), v2i[c]);
      fp.add(ff_.index_r(c,2,site),-v2r[c]);
      fp.add(ff_.index_i(c,2,site),-v2i[c]);
      fp.add(ff_.index_r(c,3,site), v1r[c]);
      fp.add(ff_.index_i(c,3,site), v1i[c]);
    }
  }
}

void Dirac_Wilson::mult_zp(Field& fp, const Field& f) const{
  int Nih = ND_*NC_; 
  int Nbdry = bdry_plw_[2].size();
  int Nbulk = bulk_pup_[2].size();

  /// boundary part ///
  double vbd[Nih*Nbdry]; 
  int is = 0;
  for(int k=0; k<Nbdry; ++k){
    int site = bdry_plw_[2][k];
    for(int c=0; c<NC_; ++c){
      vbd[r0(c)+is] = f[ff_.index_r(c,0,site)] -f[ff_.index_i(c,2,site)];
      vbd[i0(c)+is] = f[ff_.index_i(c,0,site)] +f[ff_.index_r(c,2,site)];
      vbd[r1(c)+is] = f[ff_.index_r(c,1,site)] +f[ff_.index_i(c,3,site)];
      vbd[i1(c)+is] = f[ff_.index_i(c,1,site)] -f[ff_.index_r(c,3,site)];
    }
    is += Nih;
  }
  double vbc[Nih*Nbdry]; 
  comm_->transfer_fw(vbc,vbd,Nih*Nbdry,2);

  double v1r[NC_], v1i[NC_], v2r[NC_], v2i[NC_];   
  double U[2*NC_*NC_];
  is = 0;
  for(int k=0; k<Nbdry; ++k){  
    int site = bdry_pup_[2][k];    

    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gp)(site),2)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gp)(site),2)];
      }
    }
    for(int c=0; c<NC_; ++c){
      v1r[c] = 0.0; v1i[c] = 0.0;
      v2r[c] = 0.0; v2i[c] = 0.0;
      
      for(int c1=0; c1<NC_; ++c1){
	v1r[c]+= U[re(c,c1)]*vbc[r0(c1)+is] -U[im(c,c1)]*vbc[i0(c1)+is];
	v1i[c]+= U[im(c,c1)]*vbc[r0(c1)+is] +U[re(c,c1)]*vbc[i0(c1)+is];
	v2r[c]+= U[re(c,c1)]*vbc[r1(c1)+is] -U[im(c,c1)]*vbc[i1(c1)+is];
	v2i[c]+= U[im(c,c1)]*vbc[r1(c1)+is] +U[re(c,c1)]*vbc[i1(c1)+is];
      }
      fp.add(ff_.index_r(c,0,site), v1r[c]);
      fp.add(ff_.index_i(c,0,site), v1i[c]);
      fp.add(ff_.index_r(c,1,site), v2r[c]);
      fp.add(ff_.index_i(c,1,site), v2i[c]);
      fp.add(ff_.index_r(c,2,site), v1i[c]);
      fp.add(ff_.index_i(c,2,site),-v1r[c]);
      fp.add(ff_.index_r(c,3,site),-v2i[c]);
      fp.add(ff_.index_i(c,3,site), v2r[c]);
    }
    is += Nih;
  }
  /// bulk part ///
  double w1r[NC_], w1i[NC_], w2r[NC_], w2i[NC_];
  for(int k=0; k<Nbulk; ++k){

    int site = bulk_pup_[2][k];
    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gp)(site),2)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gp)(site),2)];
      }
    }
    //int zp = (this->*xp)(site,2);
    int zp = map_->xp(site,2);
    for(int c=0; c<NC_; ++c){
      w1r[c] = f[ff_.index_r(c,0,zp)] -f[ff_.index_i(c,2,zp)];
      w1i[c] = f[ff_.index_i(c,0,zp)] +f[ff_.index_r(c,2,zp)];
      w2r[c] = f[ff_.index_r(c,1,zp)] +f[ff_.index_i(c,3,zp)];
      w2i[c] = f[ff_.index_i(c,1,zp)] -f[ff_.index_r(c,3,zp)];
    }
    for(int c=0; c<NC_; ++c){
      v1r[c] = 0.0;  v1i[c] = 0.0;
      v2r[c] = 0.0;  v2i[c] = 0.0;
      
      for(int c1=0; c1<NC_; ++c1){
	v1r[c] += U[re(c,c1)]*w1r[c1] -U[im(c,c1)]*w1i[c1];
	v1i[c] += U[im(c,c1)]*w1r[c1] +U[re(c,c1)]*w1i[c1];
	v2r[c] += U[re(c,c1)]*w2r[c1] -U[im(c,c1)]*w2i[c1];
	v2i[c] += U[im(c,c1)]*w2r[c1] +U[re(c,c1)]*w2i[c1];
      }
      fp.add(ff_.index_r(c,0,site), v1r[c]);
      fp.add(ff_.index_i(c,0,site), v1i[c]);
      fp.add(ff_.index_r(c,1,site), v2r[c]);
      fp.add(ff_.index_i(c,1,site), v2i[c]);
      fp.add(ff_.index_r(c,2,site), v1i[c]);
      fp.add(ff_.index_i(c,2,site),-v1r[c]);
      fp.add(ff_.index_r(c,3,site),-v2i[c]);
      fp.add(ff_.index_i(c,3,site), v2r[c]);
    }
  }
}

void Dirac_Wilson::mult_tp(Field& fp, const Field& f) const{
  int Nih = ND_*NC_; 
  int Nbdry = bdry_plw_[3].size();
  int Nbulk = bulk_pup_[3].size();

  /// boundary part ///
  double vbd[Nih*Nbdry]; 
  int is = 0;
  for(int k=0; k<Nbdry; ++k){
    int site = bdry_plw_[3][k];
    for(int c=0; c<NC_; ++c){
      vbd[r0(c)+is] = f[ff_.index_r(c,2,site)]*2.0;
      vbd[i0(c)+is] = f[ff_.index_i(c,2,site)]*2.0;
      vbd[r1(c)+is] = f[ff_.index_r(c,3,site)]*2.0;
      vbd[i1(c)+is] = f[ff_.index_i(c,3,site)]*2.0;
    }
    is += Nih;
  }
  double vbc[Nih*Nbdry]; 
  comm_->transfer_fw(vbc,vbd,Nih*Nbdry,2);

  double v1r[NC_], v1i[NC_], v2r[NC_], v2i[NC_];   
  double U[2*NC_*NC_];
  is = 0;
  for(int k=0; k<Nbdry; ++k){  
    int site = bdry_pup_[3][k];    

    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gp)(site),3)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gp)(site),3)];
      }
    }
    for(int c=0; c<NC_; ++c){
      v1r[c] = 0.0; v1i[c] = 0.0;
      v2r[c] = 0.0; v2i[c] = 0.0;
      
      for(int c1=0; c1<NC_; ++c1){
	v1r[c]+= U[re(c,c1)]*vbc[r0(c1)+is] -U[im(c,c1)]*vbc[i0(c1)+is];
	v1i[c]+= U[im(c,c1)]*vbc[r0(c1)+is] +U[re(c,c1)]*vbc[i0(c1)+is];
	v2r[c]+= U[re(c,c1)]*vbc[r1(c1)+is] -U[im(c,c1)]*vbc[i1(c1)+is];
	v2i[c]+= U[im(c,c1)]*vbc[r1(c1)+is] +U[re(c,c1)]*vbc[i1(c1)+is];
      }
      fp.add(ff_.index_r(c,2,site), v1r[c]);
      fp.add(ff_.index_i(c,2,site), v1i[c]);
      fp.add(ff_.index_r(c,3,site), v2r[c]);
      fp.add(ff_.index_i(c,3,site), v2i[c]);
    }
    is += Nih;
  }
  /// bulk part ///
  double w1r[NC_], w1i[NC_], w2r[NC_], w2i[NC_];
  for(int k=0; k<Nbulk; ++k){

    int site = bulk_pup_[3][k];
    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gp)(site),3)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gp)(site),3)];
      }
    }
    //int tp = (this->*xp)(site,3);
    int tp = map_->xp(site,3);
    for(int c=0; c<NC_; ++c){
      w1r[c] = f[ff_.index_r(c,2,tp)]*2.0;
      w1i[c] = f[ff_.index_i(c,2,tp)]*2.0;
      w2r[c] = f[ff_.index_r(c,3,tp)]*2.0;
      w2i[c] = f[ff_.index_i(c,3,tp)]*2.0;
    }
    for(int c=0; c<NC_; ++c){
      v1r[c] = 0.0;  v1i[c] = 0.0;
      v2r[c] = 0.0;  v2i[c] = 0.0;
      
      for(int c1=0; c1<NC_; ++c1){
	v1r[c] += U[re(c,c1)]*w1r[c1] -U[im(c,c1)]*w1i[c1];
	v1i[c] += U[im(c,c1)]*w1r[c1] +U[re(c,c1)]*w1i[c1];
	v2r[c] += U[re(c,c1)]*w2r[c1] -U[im(c,c1)]*w2i[c1];
	v2i[c] += U[im(c,c1)]*w2r[c1] +U[re(c,c1)]*w2i[c1];
      }
      fp.add(ff_.index_r(c,2,site), v1r[c]);
      fp.add(ff_.index_i(c,2,site), v1i[c]);
      fp.add(ff_.index_r(c,3,site), v2r[c]);
      fp.add(ff_.index_i(c,3,site), v2i[c]);
    }
  }
}

void Dirac_Wilson::mult_xm(Field& fm, const Field& f) const{
  int Nih = ND_*NC_; /*!< @brief num ob elements of a half spinor */
  int Nbdry = bdry_mup_[0].size();
  int Nbulk = bulk_mlw_[0].size();

  double w1r[NC_], w1i[NC_], w2r[NC_], w2i[NC_];
  double U[2*NC_*NC_];

  /// boundary part ///
  double vbd[Nih*Nbdry]; 
  int is = 0;
  for(int k=0; k<Nbdry; ++k){
    int site = bdry_mup_[0][k];
    for(int c=0; c<NC_; ++c){
      w1r[c] = f[ff_.index_r(c,0,site)] +f[ff_.index_i(c,3,site)];  
      w1i[c] = f[ff_.index_i(c,0,site)] -f[ff_.index_r(c,3,site)];
      w2r[c] = f[ff_.index_r(c,1,site)] +f[ff_.index_i(c,2,site)]; 
      w2i[c] = f[ff_.index_i(c,1,site)] -f[ff_.index_r(c,2,site)];
    }
    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gm)(site),0)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gm)(site),0)];
      }
    }
    for(int c=0; c<NC_; ++c){
      vbd[r0(c)+is] = 0.0;  vbd[i0(c)+is] = 0.0;
      vbd[r1(c)+is] = 0.0;  vbd[i1(c)+is] = 0.0;

      for(int c1=0; c1<NC_; ++c1){
	vbd[r0(c)+is] += U[re(c1,c)]*w1r[c1] +U[im(c1,c)]*w1i[c1];
	vbd[i0(c)+is] -= U[im(c1,c)]*w1r[c1] -U[re(c1,c)]*w1i[c1];
	vbd[r1(c)+is] += U[re(c1,c)]*w2r[c1] +U[im(c1,c)]*w2i[c1];
	vbd[i1(c)+is] -= U[im(c1,c)]*w2r[c1] -U[re(c1,c)]*w2i[c1];
      }
    }
    is += Nih;
  }
  double vbc[Nih*Nbdry];  //Copy vbd from backward processor
  comm_->transfer_bk(vbc,vbd,Nih*Nbdry,0);
  is = 0;
  for(int k=0; k<Nbdry; ++k){
    int site = bdry_mlw_[0][k];
    for(int c=0; c<NC_; ++c){  
      fm.add(ff_.index_r(c,0,site), vbc[r0(c)+is]);  
      fm.add(ff_.index_i(c,0,site), vbc[i0(c)+is]);
      fm.add(ff_.index_r(c,1,site), vbc[r1(c)+is]);   
      fm.add(ff_.index_i(c,1,site), vbc[i1(c)+is]);
      fm.add(ff_.index_r(c,2,site),-vbc[i1(c)+is]);
      fm.add(ff_.index_i(c,2,site), vbc[r1(c)+is]);
      fm.add(ff_.index_r(c,3,site),-vbc[i0(c)+is]); 
      fm.add(ff_.index_i(c,3,site), vbc[r0(c)+is]);
    }
    is += Nih;
  }
  /// bulk part ///
  double v1r[NC_], v1i[NC_], v2r[NC_], v2i[NC_]; 
  for(int k=0; k<Nbulk; ++k){
    int site = bulk_mlw_[0][k];
    //int xm = (this->*xm)(site,0);
    int xm = map_->xm(site,0);
    for(int c=0; c<NC_; ++c){
      w1r[c] = f[ff_.index_r(c,0,xm)] +f[ff_.index_i(c,3,xm)]; 
      w1i[c] = f[ff_.index_i(c,0,xm)] -f[ff_.index_r(c,3,xm)];
      w2r[c] = f[ff_.index_r(c,1,xm)] +f[ff_.index_i(c,2,xm)];
      w2i[c] = f[ff_.index_i(c,1,xm)] -f[ff_.index_r(c,2,xm)];
    }
    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gm)(xm),0)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gm)(xm),0)];
      }
    }
    for(int c=0; c<NC_; ++c){
      v1r[c] = 0.0; v1i[c] = 0.0; 
      v2r[c] = 0.0; v2i[c] = 0.0;

      for(int c1=0; c1<NC_; ++c1){
	v1r[c] += U[re(c1,c)]*w1r[c1] +U[im(c1,c)]*w1i[c1];
	v1i[c] -= U[im(c1,c)]*w1r[c1] -U[re(c1,c)]*w1i[c1];
	v2r[c] += U[re(c1,c)]*w2r[c1] +U[im(c1,c)]*w2i[c1];
	v2i[c] -= U[im(c1,c)]*w2r[c1] -U[re(c1,c)]*w2i[c1];
      }
      fm.add(ff_.index_r(c,0,site), v1r[c]);  
      fm.add(ff_.index_i(c,0,site), v1i[c]);
      fm.add(ff_.index_r(c,1,site), v2r[c]); 
      fm.add(ff_.index_i(c,1,site), v2i[c]);
      fm.add(ff_.index_r(c,2,site),-v2i[c]);  
      fm.add(ff_.index_i(c,2,site), v2r[c]);
      fm.add(ff_.index_r(c,3,site),-v1i[c]); 
      fm.add(ff_.index_i(c,3,site), v1r[c]);
    }
  }
}

void Dirac_Wilson::mult_ym(Field& fm, const Field& f) const{
  int Nih = ND_*NC_; /*!< @brief num ob elements of a half spinor */
  int Nbdry = bdry_mup_[1].size();
  int Nbulk = bulk_mlw_[1].size();

  double w1r[NC_], w1i[NC_], w2r[NC_], w2i[NC_];
  double U[2*NC_*NC_];

  /// boundary part ///
  double vbd[Nih*Nbdry]; 
  int is = 0;
  for(int k=0; k<Nbdry; ++k){
    int site = bdry_mup_[1][k];
    for(int c=0; c<NC_; ++c){
      w1r[c] = f[ff_.index_r(c,0,site)] -f[ff_.index_r(c,3,site)];  
      w1i[c] = f[ff_.index_i(c,0,site)] -f[ff_.index_i(c,3,site)];
      w2r[c] = f[ff_.index_r(c,1,site)] +f[ff_.index_r(c,2,site)]; 
      w2i[c] = f[ff_.index_i(c,1,site)] +f[ff_.index_i(c,2,site)];
    }
    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gm)(site),1)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gm)(site),1)];
      }
    }
    for(int c=0; c<NC_; ++c){
      vbd[r0(c)+is] = 0.0;  vbd[i0(c)+is] = 0.0;
      vbd[r1(c)+is] = 0.0;  vbd[i1(c)+is] = 0.0;

      for(int c1=0; c1<NC_; ++c1){
	vbd[r0(c)+is] += U[re(c1,c)]*w1r[c1] +U[im(c1,c)]*w1i[c1];
	vbd[i0(c)+is] -= U[im(c1,c)]*w1r[c1] -U[re(c1,c)]*w1i[c1];
	vbd[r1(c)+is] += U[re(c1,c)]*w2r[c1] +U[im(c1,c)]*w2i[c1];
	vbd[i1(c)+is] -= U[im(c1,c)]*w2r[c1] -U[re(c1,c)]*w2i[c1];
      }
    }
    is += Nih;
  }
  double vbc[Nih*Nbdry];  //Copy vbd from backward processor
  comm_->transfer_bk(vbc,vbd,Nih*Nbdry,1);
  is = 0;
  for(int k=0; k<Nbdry; ++k){
    int site = bdry_mlw_[1][k];
    for(int c=0; c<NC_; ++c){  
      fm.add(ff_.index_r(c,0,site), vbc[r0(c)+is]);  
      fm.add(ff_.index_i(c,0,site), vbc[i0(c)+is]);
      fm.add(ff_.index_r(c,1,site), vbc[r1(c)+is]);   
      fm.add(ff_.index_i(c,1,site), vbc[i1(c)+is]);
      fm.add(ff_.index_r(c,2,site), vbc[r1(c)+is]);
      fm.add(ff_.index_i(c,2,site), vbc[i1(c)+is]);
      fm.add(ff_.index_r(c,3,site),-vbc[r0(c)+is]); 
      fm.add(ff_.index_i(c,3,site),-vbc[i0(c)+is]);
    }
    is += Nih;
  }
  /// bulk part ///
  double v1r[NC_], v1i[NC_], v2r[NC_], v2i[NC_]; 
  for(int k=0; k<Nbulk; ++k){
    int site = bulk_mlw_[1][k];
    //int ym = (this->*xm)(site,1);
    int ym = map_->xm(site,1);
    for(int c=0; c<NC_; ++c){
      w1r[c] = f[ff_.index_r(c,0,ym)] -f[ff_.index_r(c,3,ym)]; 
      w1i[c] = f[ff_.index_i(c,0,ym)] -f[ff_.index_i(c,3,ym)];
      w2r[c] = f[ff_.index_r(c,1,ym)] +f[ff_.index_r(c,2,ym)];
      w2i[c] = f[ff_.index_i(c,1,ym)] +f[ff_.index_i(c,2,ym)];
    }
    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gm)(ym),1)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gm)(ym),1)];
      }
    }
    for(int c=0; c<NC_; ++c){
      v1r[c] = 0.0; v1i[c] = 0.0; 
      v2r[c] = 0.0; v2i[c] = 0.0;

      for(int c1=0; c1<NC_; ++c1){
	v1r[c] += U[re(c1,c)]*w1r[c1] +U[im(c1,c)]*w1i[c1];
	v1i[c] -= U[im(c1,c)]*w1r[c1] -U[re(c1,c)]*w1i[c1];
	v2r[c] += U[re(c1,c)]*w2r[c1] +U[im(c1,c)]*w2i[c1];
	v2i[c] -= U[im(c1,c)]*w2r[c1] -U[re(c1,c)]*w2i[c1];
      }
      fm.add(ff_.index_r(c,0,site), v1r[c]);  
      fm.add(ff_.index_i(c,0,site), v1i[c]);
      fm.add(ff_.index_r(c,1,site), v2r[c]); 
      fm.add(ff_.index_i(c,1,site), v2i[c]);
      fm.add(ff_.index_r(c,2,site), v2r[c]);  
      fm.add(ff_.index_i(c,2,site), v2i[c]);
      fm.add(ff_.index_r(c,3,site),-v1r[c]); 
      fm.add(ff_.index_i(c,3,site),-v1i[c]);
    }
  }
}

void Dirac_Wilson::mult_zm(Field& fm, const Field& f) const{
  int Nih = ND_*NC_; /*!< @brief num ob elements of a half spinor */
  int Nbdry = bdry_mup_[2].size();
  int Nbulk = bulk_mlw_[2].size();

  double w1r[NC_], w1i[NC_], w2r[NC_], w2i[NC_];
  double U[2*NC_*NC_];

  /// boundary part ///
  double vbd[Nih*Nbdry]; 
  int is = 0;
  for(int k=0; k<Nbdry; ++k){
    int site = bdry_mup_[2][k];
    for(int c=0; c<NC_; ++c){
      w1r[c] = f[ff_.index_r(c,0,site)] +f[ff_.index_i(c,2,site)];  
      w1i[c] = f[ff_.index_i(c,0,site)] -f[ff_.index_r(c,2,site)];
      w2r[c] = f[ff_.index_r(c,1,site)] -f[ff_.index_i(c,3,site)]; 
      w2i[c] = f[ff_.index_i(c,1,site)] +f[ff_.index_r(c,3,site)];
    }
    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gm)(site),2)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gm)(site),2)];
      }
    }
    for(int c=0; c<NC_; ++c){
      vbd[r0(c)+is] = 0.0;  vbd[i0(c)+is] = 0.0;
      vbd[r1(c)+is] = 0.0;  vbd[i1(c)+is] = 0.0;

      for(int c1=0; c1<NC_; ++c1){
	vbd[r0(c)+is] += U[re(c1,c)]*w1r[c1] +U[im(c1,c)]*w1i[c1];
	vbd[i0(c)+is] -= U[im(c1,c)]*w1r[c1] -U[re(c1,c)]*w1i[c1];
	vbd[r1(c)+is] += U[re(c1,c)]*w2r[c1] +U[im(c1,c)]*w2i[c1];
	vbd[i1(c)+is] -= U[im(c1,c)]*w2r[c1] -U[re(c1,c)]*w2i[c1];
      }
    }
    is += Nih;
  }
  double vbc[Nih*Nbdry];  //Copy vbd from backward processor
  comm_->transfer_bk(vbc,vbd,Nih*Nbdry,2);
  is = 0;
  for(int k=0; k<Nbdry; ++k){
    int site = bdry_mlw_[2][k];
    for(int c=0; c<NC_; ++c){  
      fm.add(ff_.index_r(c,0,site), vbc[r0(c)+is]);  
      fm.add(ff_.index_i(c,0,site), vbc[i0(c)+is]);
      fm.add(ff_.index_r(c,1,site), vbc[r1(c)+is]);   
      fm.add(ff_.index_i(c,1,site), vbc[i1(c)+is]);
      fm.add(ff_.index_r(c,2,site),-vbc[i0(c)+is]);
      fm.add(ff_.index_i(c,2,site), vbc[r0(c)+is]);
      fm.add(ff_.index_r(c,3,site), vbc[i1(c)+is]); 
      fm.add(ff_.index_i(c,3,site),-vbc[r1(c)+is]);
    }
    is += Nih;
  }
  /// bulk part ///
  double v1r[NC_], v1i[NC_], v2r[NC_], v2i[NC_]; 
  for(int k=0; k<Nbulk; ++k){
    int site = bulk_mlw_[2][k];
    //int zm = (this->*xm)(site,2);
    int zm = map_->xm(site,2);
    for(int c=0; c<NC_; ++c){
      w1r[c] = f[ff_.index_r(c,0,zm)] +f[ff_.index_i(c,2,zm)]; 
      w1i[c] = f[ff_.index_i(c,0,zm)] -f[ff_.index_r(c,2,zm)];
      w2r[c] = f[ff_.index_r(c,1,zm)] -f[ff_.index_i(c,3,zm)];
      w2i[c] = f[ff_.index_i(c,1,zm)] +f[ff_.index_r(c,3,zm)];
    }
    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gm)(zm),2)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gm)(zm),2)];
      }
    }
    for(int c=0; c<NC_; ++c){
      v1r[c] = 0.0; v1i[c] = 0.0; 
      v2r[c] = 0.0; v2i[c] = 0.0;

      for(int c1=0; c1<NC_; ++c1){
	v1r[c] += U[re(c1,c)]*w1r[c1] +U[im(c1,c)]*w1i[c1];
	v1i[c] -= U[im(c1,c)]*w1r[c1] -U[re(c1,c)]*w1i[c1];
	v2r[c] += U[re(c1,c)]*w2r[c1] +U[im(c1,c)]*w2i[c1];
	v2i[c] -= U[im(c1,c)]*w2r[c1] -U[re(c1,c)]*w2i[c1];
      }
      fm.add(ff_.index_r(c,0,site), v1r[c]);  
      fm.add(ff_.index_i(c,0,site), v1i[c]);
      fm.add(ff_.index_r(c,1,site), v2r[c]); 
      fm.add(ff_.index_i(c,1,site), v2i[c]);
      fm.add(ff_.index_r(c,2,site),-v1i[c]);  
      fm.add(ff_.index_i(c,2,site), v1r[c]);
      fm.add(ff_.index_r(c,3,site), v2i[c]); 
      fm.add(ff_.index_i(c,3,site),-v2r[c]);
    }
  }
}

void Dirac_Wilson::mult_tm(Field& fm, const Field& f) const{
  int Nih = ND_*NC_; /*!< @brief num ob elements of a half spinor */
  int Nbdry = bdry_mup_[3].size();
  int Nbulk = bulk_mlw_[3].size();

  double w1r[NC_], w1i[NC_], w2r[NC_], w2i[NC_];
  double U[2*NC_*NC_];

  /// boundary part ///
  double vbd[Nih*Nbdry]; 
  int is = 0;
  for(int k=0; k<Nbdry; ++k){
    int site = bdry_mup_[3][k];
    for(int c=0; c<NC_; ++c){
      w1r[c] = f[ff_.index_r(c,0,site)]*2.0;
      w1i[c] = f[ff_.index_i(c,0,site)]*2.0;
      w2r[c] = f[ff_.index_r(c,1,site)]*2.0;
      w2i[c] = f[ff_.index_i(c,1,site)]*2.0;
    }
    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gm)(site),3)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gm)(site),3)];
      }
    }
    for(int c=0; c<NC_; ++c){
      vbd[r0(c)+is] = 0.0;  vbd[i0(c)+is] = 0.0;
      vbd[r1(c)+is] = 0.0;  vbd[i1(c)+is] = 0.0;

      for(int c1=0; c1<NC_; ++c1){
	vbd[r0(c)+is] += U[re(c1,c)]*w1r[c1] +U[im(c1,c)]*w1i[c1];
	vbd[i0(c)+is] -= U[im(c1,c)]*w1r[c1] -U[re(c1,c)]*w1i[c1];
	vbd[r1(c)+is] += U[re(c1,c)]*w2r[c1] +U[im(c1,c)]*w2i[c1];
	vbd[i1(c)+is] -= U[im(c1,c)]*w2r[c1] -U[re(c1,c)]*w2i[c1];
      }
    }
    is += Nih;
  }
  double vbc[Nih*Nbdry];  //Copy vbd from backward processor
  comm_->transfer_bk(vbc,vbd,Nih*Nbdry,3);
  is = 0;
  for(int k=0; k<Nbdry; ++k){
    int site = bdry_mlw_[3][k];
    for(int c=0; c<NC_; ++c){  
      fm.add(ff_.index_r(c,0,site), vbc[r0(c)+is]);  
      fm.add(ff_.index_i(c,0,site), vbc[i0(c)+is]);
      fm.add(ff_.index_r(c,1,site), vbc[r1(c)+is]);   
      fm.add(ff_.index_i(c,1,site), vbc[i1(c)+is]);
    }
    is += Nih;
  }
  /// bulk part ///
  double v1r[NC_], v1i[NC_], v2r[NC_], v2i[NC_]; 
  for(int k=0; k<Nbulk; ++k){
    int site = bulk_mlw_[3][k];
    //int tm = (this->*xm)(site,3);
    int tm = map_->xm(site,3);
    for(int c=0; c<NC_; ++c){
      w1r[c] = f[ff_.index_r(c,0,tm)]*2.0;
      w1i[c] = f[ff_.index_i(c,0,tm)]*2.0;
      w2r[c] = f[ff_.index_r(c,1,tm)]*2.0;
      w2i[c] = f[ff_.index_i(c,1,tm)]*2.0;
    }
    for(int c1=0; c1<NC_; ++c1){
      for(int c2=0; c2<NC_; ++c2){
	U[re(c1,c2)] = (*u_)[gf_.index_r(c1,c2,(this->*gm)(tm),3)];
	U[im(c1,c2)] = (*u_)[gf_.index_i(c1,c2,(this->*gm)(tm),3)];
      }
    }
    for(int c=0; c<NC_; ++c){
      v1r[c] = 0.0; v1i[c] = 0.0; 
      v2r[c] = 0.0; v2i[c] = 0.0;

      for(int c1=0; c1<NC_; ++c1){
	v1r[c] += U[re(c1,c)]*w1r[c1] +U[im(c1,c)]*w1i[c1];
	v1i[c] -= U[im(c1,c)]*w1r[c1] -U[re(c1,c)]*w1i[c1];
	v2r[c] += U[re(c1,c)]*w2r[c1] +U[im(c1,c)]*w2i[c1];
	v2i[c] -= U[im(c1,c)]*w2r[c1] -U[re(c1,c)]*w2i[c1];
      }
      fm.add(ff_.index_r(c,0,site), v1r[c]);  
      fm.add(ff_.index_i(c,0,site), v1i[c]);
      fm.add(ff_.index_r(c,1,site), v2r[c]); 
      fm.add(ff_.index_i(c,1,site), v2i[c]);
    }
  }
}
